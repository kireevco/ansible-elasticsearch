---

#Test if feature is installed
- shell: "{{es_home}}/bin/elasticsearch-plugin list | grep x-pack"
  become: yes
  register: x_pack_installed
  changed_when: False
  failed_when: "'ERROR' in x_pack_installed.stdout"
  check_mode: no
  ignore_errors: yes
  environment:
    CONF_DIR: "{{ conf_dir }}"
    ES_INCLUDE: "{{ instance_default_file }}"


#Remove X-Pack if installed and its not been requested or the ES version has changed
- name: Remove x-pack plugin
  become: yes
  command: "{{es_home}}/bin/elasticsearch-plugin remove x-pack"
  register: xpack_state
  failed_when: "'ERROR' in xpack_state.stdout"
  changed_when: xpack_state.rc == 0
  when: x_pack_installed.rc == 0 and (not es_enable_xpack or es_install.changed)
  notify: restart elasticsearch
  environment:
    CONF_DIR: "{{ conf_dir }}"
    ES_INCLUDE: "{{ instance_default_file }}"


#Install plugin if not installed, or the es version has changed (so removed above), and its been requested
- name: Install x-pack plugin
  shell: >
    {% if es_proxy_host is defined and es_proxy_host != '' %}
    ES_JAVA_OPTS="-DproxyHost={{ es_proxy_host }} -DproxyPort={{ es_proxy_port }}"
    {% endif %}
    {{es_home}}/bin/elasticsearch-plugin install --silent --batch {{ es_xpack_file }}
  register: xpack_state
  failed_when: "'ERROR' in xpack_state.stdout"
  changed_when: xpack_state.rc == 0
  when: (x_pack_installed.rc == 1 or es_install.changed) and es_enable_xpack
  notify: restart elasticsearch
  environment:
    CONF_DIR: "{{ conf_dir }}"
    ES_INCLUDE: "{{ instance_default_file }}"
