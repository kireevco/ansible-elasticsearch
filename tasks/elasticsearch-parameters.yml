---
# Check for mandatory parameters
- fail: msg="es_proxy_port must be specified and cannot be blank when es_proxy_host is defined"
  when: (es_proxy_port is not defined or es_proxy_port == '') and (es_proxy_host is defined and es_proxy_host != '')

- debug: msg="WARNING - It is recommended you specify the parameter 'http.port'"
  when: es_config['http.port'] is not defined

- debug: msg="WARNING - It is recommended you specify the parameter 'transport.tcp.port'"
  when: es_config['transport.tcp.port'] is not defined

- debug: msg="WARNING - It is recommended you specify the parameter 'discovery.zen.ping.unicast.hosts'"
  when: es_config['discovery.zen.ping.unicast.hosts'] is not defined

#If the user attempts to lock memory they must specify a heap size
- fail: msg="If locking memory with bootstrap.memory_lock a heap size must be specified"
  when: es_config['bootstrap.memory_lock'] is defined and es_config['bootstrap.memory_lock'] == True and es_heap_size is not defined

#Check if working with security we have an es_api_basic_auth_username and es_api_basic_auth_username - otherwise any http calls wont work
- fail: msg="Enabling security requires an es_api_basic_auth_username and es_api_basic_auth_password to be provided to allow cluster operations"
  when: es_enable_xpack and ("security" in es_xpack_features) and es_api_basic_auth_username is not defined and es_api_basic_auth_password is not defined

- set_fact: file_reserved_users={{ es_users.file.keys() | intersect (reserved_xpack_users) }}
  when: es_users is defined and es_users.file is defined and (es_users.file.keys() | length > 0) and (es_users.file.keys() | intersect (reserved_xpack_users) | length > 0)

- fail:
     msg: "ERROR: INVALID CONFIG - YOU CANNOT CHANGE RESERVED USERS THROUGH THE FILE REALM. THE FOLLOWING CANNOT BE CHANGED: {{file_reserved_users}}. USE THE NATIVE REALM."
  when: file_reserved_users | default([]) | length > 0

- set_fact: instance_default_file={{default_file | dirname}}/{{es_instance_name + '_' if es_use_shared_fs else ''}}{{default_file | basename}}
- set_fact: instance_init_script={{init_script | dirname }}/{{es_instance_name + '_' if es_use_shared_fs else ''}}{{init_script | basename}}
- set_fact: conf_dir={{ es_conf_dir }}{{'/' + es_instance_name if es_use_shared_fs else ''}}
  when: es_use_shared_fs
- set_fact: m_lock_enabled={{ es_config['bootstrap.memory_lock'] is defined and es_config['bootstrap.memory_lock'] == True }}

#TODO - if transport.host is not local maybe error on boostrap checks

- set_fact: instance_default_file={{ default_file }}
- set_fact: instance_init_script={{ init_script }}
- set_fact: instance_sysd_script={{ sysd_script }}
